// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieAPI.MovieDbContext;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace MovieAPI.Migrations
{
    [DbContext(typeof(EldinterndbContext))]
    [Migration("20210821132801_initialCreation")]
    partial class initialCreation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "tr_TR.UTF8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("MovieAPI.Models.Genre", b =>
                {
                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("name");

                    b.HasKey("Guid")
                        .HasName("genre_pkey");

                    b.ToTable("genre", "eld_movie");
                });

            modelBuilder.Entity("MovieAPI.Models.Movie", b =>
                {
                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PosterUrl")
                        .HasColumnType("text")
                        .HasColumnName("poster_url");

                    b.Property<decimal?>("Rate")
                        .HasPrecision(2, 1)
                        .HasColumnType("numeric(2,1)")
                        .HasColumnName("rate");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("date")
                        .HasColumnName("release_date");

                    b.Property<int?>("Runtime")
                        .HasColumnType("integer")
                        .HasColumnName("runtime");

                    b.HasKey("Guid")
                        .HasName("movie_pkey");

                    b.ToTable("movie", "eld_movie");
                });

            modelBuilder.Entity("MovieAPI.Models.MovieGenre", b =>
                {
                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<Guid>("GenreGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("genre_guid");

                    b.Property<Guid>("MovieGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("movie_guid");

                    b.HasKey("Guid")
                        .HasName("movie_genre_pkey");

                    b.HasIndex("GenreGuid");

                    b.HasIndex("MovieGuid");

                    b.ToTable("movie_genre", "eld_movie");
                });

            modelBuilder.Entity("MovieAPI.Models.MoviePerson", b =>
                {
                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<Guid>("MovieGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("movie_guid");

                    b.Property<Guid>("PersonGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("person_guid");

                    b.Property<Guid>("PersonTitleGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("person_title_guid");

                    b.HasKey("Guid")
                        .HasName("movie_person_pkey");

                    b.HasIndex("MovieGuid");

                    b.HasIndex("PersonGuid");

                    b.HasIndex("PersonTitleGuid");

                    b.ToTable("movie_person", "eld_movie");
                });

            modelBuilder.Entity("MovieAPI.Models.Person", b =>
                {
                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("date")
                        .HasColumnName("birthdate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Sex")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("sex");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("surname");

                    b.HasKey("Guid")
                        .HasName("person_pkey");

                    b.ToTable("person", "eld_movie");
                });

            modelBuilder.Entity("MovieAPI.Models.PersonTitle", b =>
                {
                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Guid")
                        .HasName("person_title_pkey");

                    b.ToTable("person_title", "eld_movie");
                });

            modelBuilder.Entity("MovieAPI.Models.MovieGenre", b =>
                {
                    b.HasOne("MovieAPI.Models.Genre", "GenreGu")
                        .WithMany("MovieGenre")
                        .HasForeignKey("GenreGuid")
                        .HasConstraintName("genre_fk")
                        .IsRequired();

                    b.HasOne("MovieAPI.Models.Movie", "MovieGu")
                        .WithMany("MovieGenre")
                        .HasForeignKey("MovieGuid")
                        .HasConstraintName("movie_fk")
                        .IsRequired();

                    b.Navigation("GenreGu");

                    b.Navigation("MovieGu");
                });

            modelBuilder.Entity("MovieAPI.Models.MoviePerson", b =>
                {
                    b.HasOne("MovieAPI.Models.Movie", "MovieGu")
                        .WithMany("MoviePerson")
                        .HasForeignKey("MovieGuid")
                        .HasConstraintName("movie_fk")
                        .IsRequired();

                    b.HasOne("MovieAPI.Models.Person", "PersonGu")
                        .WithMany("MoviePerson")
                        .HasForeignKey("PersonGuid")
                        .HasConstraintName("person_fk")
                        .IsRequired();

                    b.HasOne("MovieAPI.Models.PersonTitle", "PersonTitleGu")
                        .WithMany("MoviePerson")
                        .HasForeignKey("PersonTitleGuid")
                        .HasConstraintName("person_title_fk")
                        .IsRequired();

                    b.Navigation("MovieGu");

                    b.Navigation("PersonGu");

                    b.Navigation("PersonTitleGu");
                });

            modelBuilder.Entity("MovieAPI.Models.Genre", b =>
                {
                    b.Navigation("MovieGenre");
                });

            modelBuilder.Entity("MovieAPI.Models.Movie", b =>
                {
                    b.Navigation("MovieGenre");

                    b.Navigation("MoviePerson");
                });

            modelBuilder.Entity("MovieAPI.Models.Person", b =>
                {
                    b.Navigation("MoviePerson");
                });

            modelBuilder.Entity("MovieAPI.Models.PersonTitle", b =>
                {
                    b.Navigation("MoviePerson");
                });
#pragma warning restore 612, 618
        }
    }
}
